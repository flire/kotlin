/*
 * Copyright 2010-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.idea.refactoring.pullUp;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.JetTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/refactoring/pullUp")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class PullUpTestGenerated extends AbstractPullUpTest {
    public void testAllFilesPresentInPullUp() throws Exception {
        JetTestUtils.assertAllTestsPresentInSingleGeneratedClass(this.getClass(), new File("idea/testData/refactoring/pullUp"), Pattern.compile("^(.+)\\.kt$"));
    }

    @TestMetadata("fromClassToClass.kt")
    public void testFromClassToClass() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/fromClassToClass.kt");
        doTest(fileName);
    }

    @TestMetadata("fromClassToClassMakeAbstract.kt")
    public void testFromClassToClassMakeAbstract() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/fromClassToClassMakeAbstract.kt");
        doTest(fileName);
    }

    @TestMetadata("fromClassToClassWithGenerics.kt")
    public void testFromClassToClassWithGenerics() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/fromClassToClassWithGenerics.kt");
        doTest(fileName);
    }

    @TestMetadata("fromClassToInterface.kt")
    public void testFromClassToInterface() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/fromClassToInterface.kt");
        doTest(fileName);
    }

    @TestMetadata("fromClassToInterfaceMakeAbstract.kt")
    public void testFromClassToInterfaceMakeAbstract() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/fromClassToInterfaceMakeAbstract.kt");
        doTest(fileName);
    }

    @TestMetadata("noCaret.kt")
    public void testNoCaret() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/noCaret.kt");
        doTest(fileName);
    }

    @TestMetadata("noSuperClass.kt")
    public void testNoSuperClass() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/noSuperClass.kt");
        doTest(fileName);
    }

    @TestMetadata("outsideOfClass.kt")
    public void testOutsideOfClass() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/outsideOfClass.kt");
        doTest(fileName);
    }

    @TestMetadata("removePublicInInterface.kt")
    public void testRemovePublicInInterface() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/removePublicInInterface.kt");
        doTest(fileName);
    }

    @TestMetadata("toIndirectSuperClass.kt")
    public void testToIndirectSuperClass() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/toIndirectSuperClass.kt");
        doTest(fileName);
    }
}
